package textosEpicos.view;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFileChooser;
import textosEpicos.controller.WindowPreferencesController;

/**
 *
 * @author Arthur de Souza Manske
 */
public class MainForm extends javax.swing.JFrame {
    private final WindowPreferencesController winController;
    
    private File currentFile;
    
    /**
     * Creates new form Mainform
     */
    public MainForm(WindowPreferencesController winController) {
        this.winController = winController;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        textScrollArea = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        fileNameLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuOpen = new javax.swing.JMenuItem();
        fileMenuSave = new javax.swing.JMenuItem();
        fileMenuSaveAs = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        windowDarkModeCheckbox = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpManualItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        textScrollArea.setViewportView(textArea);

        fileMenu.setText("Arquivo");

        fileMenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileMenuOpen.setText("Abrir");
        fileMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuOpenActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuOpen);

        fileMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileMenuSave.setText("Salvar");
        fileMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuSaveActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuSave);

        fileMenuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        fileMenuSaveAs.setText("Salvar como");
        fileMenuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuSaveAsActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuSaveAs);

        menuBar.add(fileMenu);

        windowMenu.setText("Janela");

        windowDarkModeCheckbox.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        windowDarkModeCheckbox.setSelected(this.winController.getTheme().equals("dark"));
        windowDarkModeCheckbox.setText("Modo escuro");
        windowDarkModeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windowDarkModeCheckboxActionPerformed(evt);
            }
        });
        windowMenu.add(windowDarkModeCheckbox);

        menuBar.add(windowMenu);

        helpMenu.setText("Ajuda");

        helpManualItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpManualItem.setText("Manual");
        helpManualItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpManualItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpManualItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textScrollArea, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(fileNameLabel)
                .addGap(0, 0, 0)
                .addComponent(textScrollArea, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void windowDarkModeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windowDarkModeCheckboxActionPerformed
        if (this.windowDarkModeCheckbox.isSelected()) {
            this.winController.setTheme("dark");
        } else {
            this.winController.setTheme("light");
        }
        
        final var error = this.winController.apply(this);        
        if (error != null)
            javax.swing.JOptionPane.showMessageDialog(null, "Não foi possível definir o tema: " + error, "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_windowDarkModeCheckboxActionPerformed

    private void helpManualItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpManualItemActionPerformed
        javax.swing.JOptionPane.showMessageDialog(null, "TODO", "TODO", javax.swing.JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_helpManualItemActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case java.awt.event.KeyEvent.VK_F1:
                this.helpManualItemActionPerformed(null);
                break;
            case java.awt.event.KeyEvent.VK_F2:
                this.windowDarkModeCheckboxActionPerformed(null);
                break;
            case 's':
                if (!evt.isControlDown()) break;
                if (evt.isShiftDown()) {
                    this.fileMenuSaveAsActionPerformed(null);                    
                } else {
                    this.fileMenuSaveActionPerformed(null);
                }
                break;
            case 'o':
                if (!evt.isControlDown()) break;
                this.fileMenuOpenActionPerformed(null);
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    private void fileMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenActionPerformed
        final var fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
        
        final var file = fileChooser.getSelectedFile();
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Erro ao ler o arquivo: " + e.getMessage(), "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;                
            }
        }
        
        try (final var reader = new BufferedReader(new FileReader(file))) {
            String contents = "";
            String line;
            
            while ((line = reader.readLine()) != null)
                contents += line + "\n";
            
            this.textArea.setText(contents);
        } catch (IOException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Erro ao ler o arquivo: " + e.getMessage(), "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.currentFile = file;
        this.fileNameLabel.setText(this.currentFile.getPath());
        this.textArea.setEnabled(true);
    }//GEN-LAST:event_fileMenuOpenActionPerformed

    private void fileMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuSaveAsActionPerformed
        final var fileChooser = new JFileChooser();
        if (!this.textArea.isEnabled()) return;
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) return;
                
        final var file = fileChooser.getSelectedFile();
        
        try (final var writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(this.textArea.getText(), 0, this.textArea.getText().length());
        } catch (IOException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + e.getMessage(), "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        this.currentFile = file;
        this.fileNameLabel.setText(this.currentFile.getPath());
    }//GEN-LAST:event_fileMenuSaveAsActionPerformed

    private void fileMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuSaveActionPerformed
        if (!this.textArea.isEnabled()) return;
        if (this.currentFile == null) {
            this.fileMenuSaveAsActionPerformed(evt);
            return;
        }
        
        try (final var writer = new BufferedWriter(new FileWriter(this.currentFile))) {
            writer.write(this.textArea.getText(), 0, this.textArea.getText().length());
        } catch (IOException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Erro ao salvar o arquivo: " + e.getMessage(), "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_fileMenuSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuOpen;
    private javax.swing.JMenuItem fileMenuSave;
    private javax.swing.JMenuItem fileMenuSaveAs;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JMenuItem helpManualItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane textScrollArea;
    private javax.swing.JCheckBoxMenuItem windowDarkModeCheckbox;
    private javax.swing.JMenu windowMenu;
    // End of variables declaration//GEN-END:variables
}
